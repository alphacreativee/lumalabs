import { preloadImages } from "../../libs/utils.js";
let lenis;
function initLenis() {
  (lenis = new Lenis({
    duration: 1.2,
    easing: (e) => Math.min(1, 1.001 - Math.pow(2, -10 * e)),
    smooth: !0,
  })),
    requestAnimationFrame(function e(t) {
      lenis.raf(t), requestAnimationFrame(e);
    }),
    lenis.on("scroll", ScrollTrigger.update),
    gsap.ticker.add((e) => {
      lenis.raf(1e3 * e);
    });
}
function hero() {
  var e = document.querySelector(".hero"),
    t = document.querySelector(".hero-personas"),
    o = document.querySelector(".hero-wrapper__video");
  document.getElementById("header"), e.offsetHeight;
  gsap.to(".hero", {
    scrollTrigger: {
      trigger: ".hero",
      start: "top top",
      end: "+=300%",
      scrub: 1,
      pin: !0,
      pinSpacing: !1,
      markers: !0,
    },
  }),
    gsap.to(o, {
      width: "80px",
      height: "40px",
      top: "calc(50% + 5px)",
      left: "50%",
      yPercent: 50,
      xPercent: -50,
      borderRadius: "40px",
      ease: "none",
      scrollTrigger: {
        trigger: o,
        start: "top top",
        end: "+=150%",
        scrub: !0,
        pinSpacing: !1,
      },
    }),
    gsap.fromTo(
      ".hero-wrapper__bg .bg-item.active",
      { opacity: 0 },
      {
        opacity: 1,
        ease: "none",
        scrollTrigger: {
          trigger: o,
          start: "top top",
          end: "+=150%",
          scrub: !0,
        },
      }
    ),
    gsap.to(".hero", {
      backgroundColor: "#B9BABA",
      ease: "none",
      scrollTrigger: { trigger: o, start: "top top", end: "+=150%", scrub: !0 },
    }),
    gsap.to(".item-ovl", {
      width: "calc(100vw - 40px)",
      height: "calc(100vh - 140px)",
      duration: 0.8,
      delay: 1,
      zIndex: 2,
      top: "20px",
      yPercent: 0,
      ease: "none",
      onUpdate: function () {
        var e = this.progress();
        console.log(e),
          0.01 <= e &&
            (document.querySelector(
              ".hero-switcher .list-item"
            ).style.opacity = 0),
          0.3 <= e &&
            gsap.to(".hero-switcher", {
              oacity: 0,
              duration: 0.5,
              ease: "none",
            }),
          0.8 <= e &&
            document.querySelector("#header").classList.remove("loading"),
          1 == e &&
            (document
              .querySelector(".hero-switcher")
              .classList.remove("loading"),
            document.querySelector(".hero").classList.remove("loading"),
            setTimeout(() => {
              document.querySelector(
                ".hero-switcher .list-item"
              ).style.opacity = 1;
            }, 0.3));
      },
    }),
    gsap.to(".item-ovl", {
      width: "calc(100vw - 40px)",
      height: "calc(100vh - 140px)",
      duration: 0.8,
      delay: 1,
      zIndex: 2,
      top: "20px",
      yPercent: 0,
      ease: "none",
      onUpdate: function () {
        var e = this.progress();
        console.log(e),
          0.01 <= e &&
            (document.querySelector(
              ".hero-switcher .list-item"
            ).style.opacity = 0),
          0.3 <= e &&
            gsap.to(".hero-switcher", {
              oacity: 0,
              duration: 0.5,
              ease: "none",
            }),
          0.8 <= e &&
            document.querySelector("#header").classList.remove("loading"),
          1 == e &&
            (document
              .querySelector(".hero-switcher")
              .classList.remove("loading"),
            document.querySelector(".hero").classList.remove("loading"),
            setTimeout(() => {
              document.querySelector(
                ".hero-switcher .list-item"
              ).style.opacity = 1;
            }, 0.3));
      },
    }),
    gsap.fromTo(
      "#header",
      { top: "100%", yPercent: -100, opacity: 1 },
      {
        top: 0,
        yPercent: 0,
        ease: "none",
        scrollTrigger: {
          trigger: "body",
          start: "top top",
          end: "50% top",
          scrub: !0,
          pinSpacing: !1,
          onUpdate: (e) => {
            e = e.progress.toFixed(2);
            let t;
            (t =
              e < 0.1
                ? 1
                : 0.1 <= e && e <= 0.2
                ? 1 - 10 * (e - 0.1)
                : 0.2 < e && e < 0.99
                ? 0
                : 1),
              0.9 <= e
                ? document
                    .getElementById("header")
                    .classList.add("header--fixed")
                : document
                    .getElementById("header")
                    .classList.remove("header--fixed"),
              1 == e
                ? (document
                    .querySelector(".hero-switcher")
                    .classList.add("active"),
                  document
                    .querySelector(".hero-gradient")
                    .classList.add("active"))
                : (document
                    .querySelector(".hero-switcher")
                    .classList.remove("active"),
                  document
                    .querySelector(".hero-gradient")
                    .classList.remove("active")),
              gsap.to("#header", { opacity: t });
          },
        },
      }
    ),
    gsap.to(t, {
      scale: 0.52,
      ease: "none",
      scrollTrigger: {
        trigger: o,
        start: "top top",
        end: "+=150%",
        scrub: !0,
        pinSpacing: !1,
        onUpdate: (e) => {
          1 == e.progress.toFixed(2)
            ? document.querySelector(".hero").classList.add("done-video")
            : document.querySelector(".hero").classList.remove("done-video");
        },
      },
    }),
    ScrollTrigger.refresh();
}
function parallaxIt(e, t, o) {
  var r = t.getBoundingClientRect(),
    a = e.clientX - r.left;
  gsap.to(t, {
    duration: 0.3,
    x: (a / r.width - 0.5) * o,
    y: ((e.clientY - r.top) / r.height - 0.5) * o,
    ease: "power2.out",
  });
}
function callParallax(e) {
  var t = e.currentTarget,
    o = t.querySelector("img"),
    r = t.querySelector("span");
  parallaxIt(e, t, 10), o && parallaxIt(e, o, 20), r && parallaxIt(e, r, 15);
}
function hoverIcon() {
  var e = document.querySelectorAll(".list-item .item"),
    t = document.querySelectorAll(".btn-large");
  e.forEach((t) => {
    t.addEventListener("mousemove", (e) => {
      callParallax(e);
    }),
      t.addEventListener("mouseleave", () => {
        gsap.to(t, {
          duration: 0.3,
          height: 60,
          width: 100,
          x: 0,
          y: 0,
          ease: "power2.out",
        });
        var e = t.querySelector("img");
        e &&
          gsap.to(e, {
            duration: 0.3,
            x: 0,
            y: 0,
            scale: 1,
            ease: "power2.out",
          });
      }),
      t.addEventListener("mouseenter", () => {
        var e = t.querySelector("img");
        e && gsap.to(e, { duration: 0.3, scale: 0.9, ease: "power2.out" });
      });
  }),
    t.forEach((t) => {
      t.addEventListener("mousemove", (e) => {
        callParallax(e);
      }),
        t.addEventListener("mouseleave", () => {
          gsap.to(t, { duration: 0.3, x: 0, y: 0, ease: "power2.out" });
          var e = t.querySelector("span");
          e &&
            gsap.to(e, {
              duration: 0.3,
              x: 0,
              y: 0,
              scale: 1,
              ease: "power2.out",
            });
        }),
        t.addEventListener("mouseenter", () => {
          var e = t.querySelector("span");
          e && gsap.to(e, { duration: 0.3, scale: 0.9, ease: "power2.out" });
        });
    });
}
function testimonial() {
  let a = document.querySelector(".testimonial__scroll-wrapper"),
    n = document.querySelector(".testimonial__container"),
    s,
    i = !1;
  n.addEventListener("mouseenter", () => {
    i = !0;
  }),
    n.addEventListener("mouseleave", () => {
      (i = !1), (a.style.transform = "translateX(0px)");
    }),
    n.addEventListener("mousemove", function (e) {
      var t, o, r;
      i &&
        ((t = n.offsetWidth),
        (o = a.scrollWidth - t),
        (r = n.getBoundingClientRect()),
        (e = (e.clientX - r.left) / t),
        (s = e * o * -1),
        (a.style.transform = `translateX(${s}px)`));
    });
}
Splitting();
let init = () => {
  initLenis(),
    hero(),
    hoverIcon(),
    testimonial(),
    window.addEventListener("resize", () => {
      ScrollTrigger.refresh();
    });
};
preloadImages("img").then(() => {
  document.body.classList.remove("loading"), init();
}),
  $(window).on("beforeunload", function () {
    $(window).scrollTop(0);
  });
